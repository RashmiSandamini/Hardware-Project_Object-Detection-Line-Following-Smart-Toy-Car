
IR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056e  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d9  00000000  00000000  00000beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000335  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000111d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>

int main(void)
{
	/*IR Remote*/
	DDRA&=~((1<<0)|(1<<1));//ir as input
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8c 7f       	andi	r24, 0xFC	; 252
  70:	8a bb       	out	0x1a, r24	; 26
	DDRA|=(0b1111<<4);//motor
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	80 6f       	ori	r24, 0xF0	; 240
  76:	8a bb       	out	0x1a, r24	; 26
	
	
	while (1)
	{
		if (PINA&(1<<0))
  78:	c8 9b       	sbis	0x19, 0	; 25
  7a:	05 c0       	rjmp	.+10     	; 0x86 <main+0x1a>
		{
			PORTA=(PORTA&0x0F)|(0b0110<<4);//right
  7c:	8b b3       	in	r24, 0x1b	; 27
  7e:	8f 70       	andi	r24, 0x0F	; 15
  80:	80 66       	ori	r24, 0x60	; 96
  82:	8b bb       	out	0x1b, r24	; 27
  84:	f9 cf       	rjmp	.-14     	; 0x78 <main+0xc>
		}
		
		else if((PINA&(1<<1)))
  86:	c9 9b       	sbis	0x19, 1	; 25
  88:	05 c0       	rjmp	.+10     	; 0x94 <main+0x28>
		{
			PORTA=(PORTA&0x0F)|(0b1001<<4);//left
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	8f 70       	andi	r24, 0x0F	; 15
  8e:	80 69       	ori	r24, 0x90	; 144
  90:	8b bb       	out	0x1b, r24	; 27
  92:	f2 cf       	rjmp	.-28     	; 0x78 <main+0xc>
		}
		
		else
		{
			PORTA=(PORTA&0x0F)|(0b0101<<4);//go
  94:	8b b3       	in	r24, 0x1b	; 27
  96:	8f 70       	andi	r24, 0x0F	; 15
  98:	80 65       	ori	r24, 0x50	; 80
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	ed cf       	rjmp	.-38     	; 0x78 <main+0xc>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
